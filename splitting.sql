-- MySQL dump 10.13  Distrib 5.7.17, for Win64 (x86_64)
--
-- Host: localhost    Database: splitting
-- ------------------------------------------------------
-- Server version	5.7.21-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `reccomendations`
--

DROP TABLE IF EXISTS `reccomendations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `reccomendations` (
  `ID` int(11) NOT NULL,
  `SONGGROUP` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reccomendations`
--

LOCK TABLES `reccomendations` WRITE;
/*!40000 ALTER TABLE `reccomendations` DISABLE KEYS */;
INSERT INTO `reccomendations` VALUES (1,'male-adult-hindi-grp-9'),(2,'female-minor-hindi-grp-13'),(3,'male-adult-english-grp-9'),(4,'male-adult-english-grp-10');
/*!40000 ALTER TABLE `reccomendations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `register`
--

DROP TABLE IF EXISTS `register`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `register` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(45) NOT NULL,
  `emailid` varchar(45) NOT NULL,
  `mobilenumber` varchar(10) DEFAULT NULL,
  `age` int(10) unsigned NOT NULL,
  `gender` varchar(45) DEFAULT NULL,
  `district` varchar(45) DEFAULT NULL,
  `password` varchar(45) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `register`
--

LOCK TABLES `register` WRITE;
/*!40000 ALTER TABLE `register` DISABLE KEYS */;
INSERT INTO `register` VALUES (1,'a','a@a.com','9962199786',23,'male','north-north','qwerty'),(2,'b','b@b.com','9988998898',12,'female','east-north','123456'),(3,'c','c@c.com','1234567890',40,'male','south-north','qwerty12345'),(4,'d','d@d.com','1122334455',30,'male','south-east','asdfgh');
/*!40000 ALTER TABLE `register` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `upload`
--

DROP TABLE IF EXISTS `upload`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `upload` (
  `filename` varchar(45) NOT NULL,
  `singer` varchar(50) DEFAULT NULL,
  `music` varchar(50) DEFAULT NULL,
  `filefullpath` varchar(500) NOT NULL,
  `filetype` varchar(45) NOT NULL,
  `filesize` int(10) unsigned NOT NULL,
  `fullcontent` longtext NOT NULL,
  `language1` varchar(15) DEFAULT NULL,
  `grouplist` varchar(45) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `upload`
--

LOCK TABLES `upload` WRITE;
/*!40000 ALTER TABLE `upload` DISABLE KEYS */;
INSERT INTO `upload` VALUES ('AalaporanTamizhan.txt','aaa','ssss','D:\\project3\\SplittingCriteria\\WebContent\\Fileupload\\AalaporanTamizhan.txt','text/plain',2076,'Oorukannu Uravukannu \r\nUnna Mochu Paakum Ninnu\r\nChinnamaga Raasan Vaaran \r\nMeesa Murukku..Hoii..\r\nEnga Mannu Thanga Mannu\r\nUnna Vaikum Singa Mannu\r\n\r\n( Muththu Mani Rathinatha Pethedutha Ranjidham\r\nOorukulla Vazhathandu Ammanukkum Sammandham\r\nEndha Neram Kandaalum Kannu Dhane Kalangum\r\nKannupola Engalukku Kaavalaa Ne Varanum – Background low)\r\n\r\nAalaporaan Tamizhan \r\nUlagam Ellame\r\nVetrimaga Vazhi Dhan \r\nInime Ellame\r\nVeeranna Yarunu \r\nIndha Naatuke\r\nAvan Sonnane\r\nVaayilla Maatukum \r\nAda Needhiya \r\nThandhaane\r\n\r\nSolli Solli \r\nSariththirathil Per Pori Dhan\r\nNenjil Alli \r\nKaattil Namma Thenthamizh Thelipaan\r\nInnum \r\nUlagamezha\r\nThanga \r\nThamizha Paada\r\nPacha \r\nThamizh \r\nUchi Pugazh Yeri Sir\r\n\r\nVaarayo Vaarai Ne \r\nAnbaavandha Odikodupom\r\nVaarayo Vaarai Ne \r\nVambaavabdha Suzhukedupom\r\nThamizhanda Ennalum\r\nSonnale Thimirerum\r\nKathoda Kalandhalum\r\nAdhu Dhan Un Adaiyaalam\r\n\r\nHey Anba Kotti \r\nEnga Mozhi Adithalam Pottom\r\nAgunatha Narigiral Agaratha Serthom\r\nThalaimurai Kadandhume Virivadha Parthom\r\nUlagathin Mudhal Mozhi Usurane Kaathom\r\nNaal Nagara Maatrangal \r\nYedhum Un Mozhi Saayum En Thane\r\nPaarizhaiya Thamizhanum Varuvan \r\nThaai Thamizh Thooki Vinbaane\r\nKadaisi Thamizhanin Raththam Yezhum Veezhadhe\r\n\r\n( Muththu Mani Rathinatha Pethedutha Ranjidham\r\nOorukulla Vazhathandu Ammanukkum Sammandham\r\nEndha Neram Kandaalum Kannu Dhane Kalangum\r\nKannupola Engalukku Kaavalaa Ne Varanum )\r\n\r\nNedundhooram Un Isai Ketkum\r\nPirai Neeti Pournami Aakum\r\nVedha Kaatil Vinmin Pookum\r\nVizhichalum Nesandhaa\r\nUyirazhaiyumo Neththi Mutham Podhum\r\nVarungaalum Vaasalil Sekkum\r\n\r\n( Muththu Mani Rathinatha Pethedutha Ranjidham\r\nOorukulla Vazhathandu Ammanukkum Sammandham\r\nEndha Neram Kandaalum Kannu Dhane Kalangum\r\nKannupola Engalukku Kaavalaa Ne Varanum )\r\n\r\nAalaporaan Tamizhan \r\nUlagam Ellame\r\nVetrimaga Vazhi Dhan \r\nInime Ellame\r\nVeeranna Yarunu \r\nIndha Naatuke\r\nAvan Sonnane\r\nVaayilla Maatukum \r\nAda Needhiya \r\nThandhaane\r\n\r\nVaarayo Vaarai Ne \r\nAnbaavandha Odikodupom\r\nVaarayo Vaarai Ne \r\nVambaavabdha Suzhukedupom\r\nThamizhanda Ennalum\r\nThamizhanne Onnanom\r\nAanadhu EnnalumOorukannu Uravukannu \r\nUnna Mochu Paakum Ninnu\r\nChinnamaga Raasan Vaaran \r\nMeesa Murukku..Hoii..\r\nEnga Mannu Thanga Mannu\r\nUnna Vaikum Singa Mannu\r\n\r\n( Muththu Mani Rathinatha Pethedutha Ranjidham\r\nOorukulla Vazhathandu Ammanukkum Sammandham\r\nEndha Neram Kandaalum Kannu Dhane Kalangum\r\nKannupola Engalukku Kaavalaa Ne Varanum – Background low)\r\n\r\nAalaporaan Tamizhan \r\nUlagam Ellame\r\nVetrimaga Vazhi Dhan \r\nInime Ellame\r\nVeeranna Yarunu \r\nIndha Naatuke\r\nAvan Sonnane\r\nVaayilla Maatukum \r\nAda Needhiya \r\nThandhaane\r\n\r\nSolli Solli \r\nSariththirathil Per Pori Dhan\r\nNenjil Alli \r\nKaattil Namma Thenthamizh Thelipaan\r\nInnum \r\nUlagamezha\r\nThanga \r\nThamizha Paada\r\nPacha \r\nThamizh \r\nUchi Pugazh Yeri Sir\r\n\r\nVaarayo Vaarai Ne \r\nAnbaavandha Odikodupom\r\nVaarayo Vaarai Ne \r\nVambaavabdha Suzhukedupom\r\nThamizhanda Ennalum\r\nSonnale Thimirerum\r\nKathoda Kalandhalum\r\nAdhu Dhan Un Adaiyaalam\r\n\r\nHey Anba Kotti \r\nEnga Mozhi Adithalam Pottom\r\nAgunatha Narigiral Agaratha Serthom\r\nThalaimurai Kadandhume Virivadha Parthom\r\nUlagathin Mudhal Mozhi Usurane Kaathom\r\nNaal Nagara Maatrangal \r\nYedhum Un Mozhi Saayum En Thane\r\nPaarizhaiya Thamizhanum Varuvan \r\nThaai Thamizh Thooki Vinbaane\r\nKadaisi Thamizhanin Raththam Yezhum Veezhadhe\r\n\r\n( Muththu Mani Rathinatha Pethedutha Ranjidham\r\nOorukulla Vazhathandu Ammanukkum Sammandham\r\nEndha Neram Kandaalum Kannu Dhane Kalangum\r\nKannupola Engalukku Kaavalaa Ne Varanum )\r\n\r\nNedundhooram Un Isai Ketkum\r\nPirai Neeti Pournami Aakum\r\nVedha Kaatil Vinmin Pookum\r\nVizhichalum Nesandhaa\r\nUyirazhaiyumo Neththi Mutham Podhum\r\nVarungaalum Vaasalil Sekkum\r\n\r\n( Muththu Mani Rathinatha Pethedutha Ranjidham\r\nOorukulla Vazhathandu Ammanukkum Sammandham\r\nEndha Neram Kandaalum Kannu Dhane Kalangum\r\nKannupola Engalukku Kaavalaa Ne Varanum )\r\n\r\nAalaporaan Tamizhan \r\nUlagam Ellame\r\nVetrimaga Vazhi Dhan \r\nInime Ellame\r\nVeeranna Yarunu \r\nIndha Naatuke\r\nAvan Sonnane\r\nVaayilla Maatukum \r\nAda Needhiya \r\nThandhaane\r\n\r\nVaarayo Vaarai Ne \r\nAnbaavandha Odikodupom\r\nVaarayo Vaarai Ne \r\nVambaavabdha Suzhukedupom\r\nThamizhanda Ennalum\r\nThamizhanne Onnanom\r\nAanadhu Ennalum','Tamil','male-adult-hindi-grp-9'),('chinamanikuyilae.txt','qqq','www','D:\\project3\\SplittingCriteria\\WebContent\\Fileupload\\chinamanikuyilae.txt','text/plain',640,'Chinna Mani Kuyile Mella Varum Mayilae\r\nEngae Un Jodi Naan Poaraen Thaedi\r\nIngae Un Joadi Illaama Kaetathaan Bathilum Sollaama\r\nKukukoo Enakoovuvadaenadi Kanmani Kanmani\r\nBathil Sollu Nee Sollu Nee\r\n\r\n(Chinna)\r\n\r\nNillaatha Vaigaiyilae Neeraada Poagayilae\r\nSellaatha Seigaiyilae Neejaada Seigayilae\r\nKallaagi Poanen Naanum Kan Paarthaa Aalaavaen\r\nKaiserum Kaalam Vanthaa Thoaloadu Thoalaavaen\r\nUlla Ganathathadi Raagam Paadi Naalum Thaedi\r\nNee Adikkadi Anaikkanum Kanmani Kanmani\r\nBathil Sollu Nee Sollu Nee\r\n\r\n(Chinna)\r\n\r\nPattu Thuniyuduthi Uchi Mudi Thiruthi\r\nEttu Adiyeduthu Etti Nadantha Pulla\r\nUn Saela Kaatril Aada En Nenjum SaerndathaChinna Mani Kuyile Mella Varum Mayilae\r\nEngae Un Jodi Naan Poaraen Thaedi\r\nIngae Un Joadi Illaama Kaetathaan Bathilum Sollaama\r\nKukukoo Enakoovuvadaenadi Kanmani Kanmani\r\nBathil Sollu Nee Sollu Nee\r\n\r\n(Chinna)\r\n\r\nNillaatha Vaigaiyilae Neeraada Poagayilae\r\nSellaatha Seigaiyilae Neejaada Seigayilae\r\nKallaagi Poanen Naanum Kan Paarthaa Aalaavaen\r\nKaiserum Kaalam Vanthaa Thoaloadu Thoalaavaen\r\nUlla Ganathathadi Raagam Paadi Naalum Thaedi\r\nNee Adikkadi Anaikkanum Kanmani Kanmani\r\nBathil Sollu Nee Sollu Nee\r\n\r\n(Chinna)\r\n\r\nPattu Thuniyuduthi Uchi Mudi Thiruthi\r\nEttu Adiyeduthu Etti Nadantha Pulla\r\nUn Saela Kaatril Aada En Nenjum Saerndatha','Tamil','male-adult-hindi-grp-9'),('DavidGuetta.txt','aaa','qqq','D:\\project3\\SplittingCriteria\\WebContent\\Fileupload\\DavidGuetta.txt','text/plain',2486,'Be my woman, girl, I\'ll be your man\r\nBe my woman, girl, I\'ll be your man\r\n\r\nYes I\'ll be your woman\r\nYes I\'ll be your baby\r\nYes I\'ll be whatever that you tell me when you\'re ready\r\nYes I\'ll be your girl, forever your lady\r\nYou ain\'t ever gotta worry, I\'m down for you, baby\r\n\r\nBest believe that, when you need that\r\nI\'ll provide that, you will always have it\r\nI\'ll be on deck, keep it in check\r\nWhen you need that, I\'mma let you have it\r\n\r\nBeating my drum like dum di di day\r\nI like the dirty rhythm you play\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\nBanging the drum like dum di di day\r\nI know you want it in the worst way\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\n\r\nBe my woman, girl, I\'ll be your man\r\nBe my woman, girl, I\'ll be your man\r\n\r\nYes I do the cooking\r\nYes I do the cleaning\r\nPlus I keep the na-na real sweet for your eating\r\nYes you be the boss and yes I be respecting\r\nWhatever that you tell me cause it\'s game you be spitting\r\n\r\nBest believe that, when you need that\r\nI\'ll provide that, you will always have it\r\nI\'ll be on deck, keep it in check\r\nWhen you need that, I\'mma let you have it\r\n\r\nBeating my drum like dum di di day\r\nI like the dirty rhythm you play\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\nBanging the drum like dum di di day\r\nI know you want it in the worst way\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\nHey!\r\n\r\nBe my woman, girl, I\'ll be your man\r\nBe my woman, girl, I\'ll be your man\r\n\r\nWhole crew got the juice\r\nYour dick came the truth\r\nMy screams is the proof\r\nThem other dudes get the deuce\r\nWhen I speed in the coupe\r\nLeavin\' this interview\r\nIt ain\'t nothing new\r\nI been fucking with you\r\nNone of them bitches ain\'t taking you\r\nJust tell \'em to make a U\r\nThat\'s how it be\r\nI come first like debut\r\n\r\nSo, baby, when you need that\r\nGimme the word, I\'m no good\r\nI\'ll be bad for my baby\r\n\r\nSo I make sure that he\'s getting his share\r\nSo I make sure that his baby take care\r\nSo I make sure I\'m on my toes, on my knees\r\nKeep him pleased, rub him down\r\nBe a lady and a freak\r\n\r\nBeating my drum like dum di di day\r\nI like the dirty rhythm you play\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\nBanging the drum like dum di di day\r\nI know you want it in the worst way\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\n\r\nBe my woman, girl, I\'ll be your man\r\nBe my woman, girl, I\'ll be your manBe my woman, girl, I\'ll be your man\r\nBe my woman, girl, I\'ll be your man\r\n\r\nYes I\'ll be your woman\r\nYes I\'ll be your baby\r\nYes I\'ll be whatever that you tell me when you\'re ready\r\nYes I\'ll be your girl, forever your lady\r\nYou ain\'t ever gotta worry, I\'m down for you, baby\r\n\r\nBest believe that, when you need that\r\nI\'ll provide that, you will always have it\r\nI\'ll be on deck, keep it in check\r\nWhen you need that, I\'mma let you have it\r\n\r\nBeating my drum like dum di di day\r\nI like the dirty rhythm you play\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\nBanging the drum like dum di di day\r\nI know you want it in the worst way\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\n\r\nBe my woman, girl, I\'ll be your man\r\nBe my woman, girl, I\'ll be your man\r\n\r\nYes I do the cooking\r\nYes I do the cleaning\r\nPlus I keep the na-na real sweet for your eating\r\nYes you be the boss and yes I be respecting\r\nWhatever that you tell me cause it\'s game you be spitting\r\n\r\nBest believe that, when you need that\r\nI\'ll provide that, you will always have it\r\nI\'ll be on deck, keep it in check\r\nWhen you need that, I\'mma let you have it\r\n\r\nBeating my drum like dum di di day\r\nI like the dirty rhythm you play\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\nBanging the drum like dum di di day\r\nI know you want it in the worst way\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\nHey!\r\n\r\nBe my woman, girl, I\'ll be your man\r\nBe my woman, girl, I\'ll be your man\r\n\r\nWhole crew got the juice\r\nYour dick came the truth\r\nMy screams is the proof\r\nThem other dudes get the deuce\r\nWhen I speed in the coupe\r\nLeavin\' this interview\r\nIt ain\'t nothing new\r\nI been fucking with you\r\nNone of them bitches ain\'t taking you\r\nJust tell \'em to make a U\r\nThat\'s how it be\r\nI come first like debut\r\n\r\nSo, baby, when you need that\r\nGimme the word, I\'m no good\r\nI\'ll be bad for my baby\r\n\r\nSo I make sure that he\'s getting his share\r\nSo I make sure that his baby take care\r\nSo I make sure I\'m on my toes, on my knees\r\nKeep him pleased, rub him down\r\nBe a lady and a freak\r\n\r\nBeating my drum like dum di di day\r\nI like the dirty rhythm you play\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\nBanging the drum like dum di di day\r\nI know you want it in the worst way\r\nI wanna hear you callin\' my name\r\nLike, hey ma ma, mama, hey ma, mama\r\n\r\nBe my woman, girl, I\'ll be your man\r\nBe my woman, girl, I\'ll be your man','English','male-adult-english-grp-9'),('edited one.txt','Maka','Maka lalalala','C:\\Users\\user\\eclipse-workspace\\SplittingCriteria\\WebContent\\Fileupload\\edited one.txt','text/plain',13040,'\"\"\"Code to accompany Machine Learning Recipes #8.\r\nWe\'ll write a Decision Tree Classifier, in pure Python.\r\n\"\"\"\r\n\r\n# For Python 2 / 3 compatability\r\nfrom __future__ import print_function\r\nfrom combs import generate_data_hindi\r\nfrom data_generator import generate_data\r\nimport sqlite3\r\n\r\n# Toy dataset.\r\n# Format: each row is an example.\r\n# The last column is the label.\r\n# The first two columns are features.\r\n# Feel free to play with it by adding more features & examples.\r\n# Interesting note: I\'ve written this so the 2nd and 5th examples\r\n# have the same features, but different labels - so we can see how the\r\n# tree handles this case.\r\n\r\n#training_data = generate_data_hindi()\r\n\r\ntraining_data = generate_data()\r\n\r\n# Column labels.\r\n# These are used only to print the tree.\r\n\r\n#header = [\"song1\",\"song2\",\"song3\",\"song4\",\"song5\", \"label\"]\r\n\r\nheader = [\"gender\",\"age\",\"region\", \"song1\", \"song2\", \"song3\", \"song4\", \"song5\", \"label\"]\r\n\r\n\r\ndef unique_vals(rows, col):\r\n    \"\"\"Find the unique values for a column in a dataset.\"\"\"\r\n    return set([row[col] for row in rows])\r\n\r\n#######\r\n# Demo:\r\n# unique_vals(training_data, 0)\r\n# unique_vals(training_data, 1)\r\n#######\r\n\r\n\r\ndef class_counts(rows):\r\n    \"\"\"Counts the number of each type of example in a dataset.\"\"\"\r\n    counts = {}  # a dictionary of label -> count.\r\n    for row in rows:\r\n        # in our dataset format, the label is always the last column\r\n        label = row[-1]\r\n        if label not in counts:\r\n            counts[label] = 0\r\n        counts[label] += 1\r\n    return counts\r\n\r\n#######\r\n# Demo:\r\n# class_counts(training_data)\r\n#######\r\n\r\n\r\ndef is_numeric(value):\r\n    \"\"\"Test if a value is numeric.\"\"\"\r\n    return isinstance(value, int) or isinstance(value, float)\r\n\r\n#######\r\n# Demo:\r\n# is_numeric(7)\r\n# is_numeric(\"Red\")\r\n#######\r\n\r\n\r\nclass Question:\r\n    \"\"\"A Question is used to partition a dataset.\r\n    This class just records a \'column number\' (e.g., 0 for Color) and a\r\n    \'column value\' (e.g., Green). The \'match\' method is used to compare\r\n    the feature value in an example to the feature value stored in the\r\n    question. See the demo below.\r\n    \"\"\"\r\n\r\n    def __init__(self, column, value):\r\n        self.column = column\r\n        self.value = value\r\n\r\n    def match(self, example):\r\n        # Compare the feature value in an example to the\r\n        # feature value in this question.\r\n        val = example[self.column]\r\n        if is_numeric(val):\r\n            return val >= self.value\r\n        else:\r\n            return val == self.value\r\n\r\n    def __repr__(self):\r\n        # This is just a helper method to print\r\n        # the question in a readable format.\r\n        condition = \"==\"\r\n        if is_numeric(self.value):\r\n            condition = \">=\"\r\n        return \"Is %s %s %s?\" % (\r\n            header[self.column], condition, str(self.value))\r\n\r\n#######\r\n# Demo:\r\n# Let\'s write a question for a numeric attribute\r\n# Question(1, 3)\r\n# How about one for a categorical attribute\r\n# q = Question(0, \'Green\')\r\n# Let\'s pick an example from the training set...\r\n# example = training_data[0]\r\n# ... and see if it matches the question\r\n# q.match(example)\r\n#######\r\n\r\n\r\ndef partition(rows, question):\r\n    \"\"\"Partitions a dataset.\r\n    For each row in the dataset, check if it matches the question. If\r\n    so, add it to \'true rows\', otherwise, add it to \'false rows\'.\r\n    \"\"\"\r\n    true_rows, false_rows = [], []\r\n    for row in rows:\r\n        if question.match(row):\r\n            true_rows.append(row)\r\n        else:\r\n            false_rows.append(row)\r\n    return true_rows, false_rows\r\n\r\n\r\n#######\r\n# Demo:\r\n# Let\'s partition the training data based on whether rows are Red.\r\n# true_rows, false_rows = partition(training_data, Question(0, \'Red\'))\r\n# This will contain all the \'Red\' rows.\r\n# true_rows\r\n# This will contain everything else.\r\n# false_rows\r\n#######\r\n\r\ndef gini(rows):\r\n    \"\"\"Calculate the Gini Impurity for a list of rows.\r\n    There are a few different ways to do this, I thought this one was\r\n    the most concise. See:\r\n    https://en.wikipedia.org/wiki/Decision_tree_learning#Gini_impurity\r\n    \"\"\"\r\n    counts = class_counts(rows)\r\n    impurity = 1\r\n    for lbl in counts:\r\n        prob_of_lbl = counts[lbl] / float(len(rows))\r\n        impurity -= prob_of_lbl**2\r\n    return impurity\r\n\r\n\r\n#######\r\n# Demo:\r\n# Let\'s look at some example to understand how Gini Impurity works.\r\n#\r\n# First, we\'ll look at a dataset with no mixing.\r\n# no_mixing = [[\'Apple\'],\r\n#              [\'Apple\']]\r\n# this will return 0\r\n# gini(no_mixing)\r\n#\r\n# Now, we\'ll look at dataset with a 50:50 apples:oranges ratio\r\n# some_mixing = [[\'Apple\'],\r\n#               [\'Orange\']]\r\n# this will return 0.5 - meaning, there\'s a 50% chance of misclassifying\r\n# a random example we draw from the dataset.\r\n# gini(some_mixing)\r\n#\r\n# Now, we\'ll look at a dataset with many different labels\r\n# lots_of_mixing = [[\'Apple\'],\r\n#                  [\'Orange\'],\r\n#                  [\'Grape\'],\r\n#                  [\'Grapefruit\'],\r\n#                  [\'Blueberry\']]\r\n# This will return 0.8\r\n# gini(lots_of_mixing)\r\n#######\r\n\r\ndef info_gain(left, right, current_uncertainty):\r\n    \"\"\"Information Gain.\r\n    The uncertainty of the starting node, minus the weighted impurity of\r\n    two child nodes.\r\n    \"\"\"\r\n    p = float(len(left)) / (len(left) + len(right))\r\n    return current_uncertainty - p * gini(left) - (1 - p) * gini(right)\r\n\r\n#######\r\n# Demo:\r\n# Calculate the uncertainy of our training data.\r\n# current_uncertainty = gini(training_data)\r\n#\r\n# How much information do we gain by partioning on \'Green\'?\r\n# true_rows, false_rows = partition(training_data, Question(0, \'Green\'))\r\n# info_gain(true_rows, false_rows, current_uncertainty)\r\n#\r\n# What about if we partioned on \'Red\' instead?\r\n# true_rows, false_rows = partition(training_data, Question(0,\'Red\'))\r\n# info_gain(true_rows, false_rows, current_uncertainty)\r\n#\r\n# It looks like we learned more using \'Red\' (0.37), than \'Green\' (0.14).\r\n# Why? Look at the different splits that result, and see which one\r\n# looks more \'unmixed\' to you.\r\n# true_rows, false_rows = partition(training_data, Question(0,\'Red\'))\r\n#\r\n# Here, the true_rows contain only \'Grapes\'.\r\n# true_rows\r\n#\r\n# And the false rows contain two types of fruit. Not too bad.\r\n# false_rows\r\n#\r\n# On the other hand, partitioning by Green doesn\'t help so much.\r\n# true_rows, false_rows = partition(training_data, Question(0,\'Green\'))\r\n#\r\n# We\'ve isolated one apple in the true rows.\r\n# true_rows\r\n#\r\n# But, the false-rows are badly mixed up.\r\n# false_rows\r\n#######\r\n\r\n\r\ndef find_best_split(rows):\r\n    \"\"\"Find the best question to ask by iterating over every feature / value\r\n    and calculating the information gain.\"\"\"\r\n    best_gain = 0  # keep track of the best information gain\r\n    best_question = None  # keep train of the feature / value that produced it\r\n    current_uncertainty = gini(rows)\r\n    n_features = len(rows[0]) - 1  # number of columns\r\n\r\n    for col in range(n_features):  # for each feature\r\n\r\n        values = set([row[col] for row in rows])  # unique values in the column\r\n\r\n        for val in values:  # for each value\r\n\r\n            question = Question(col, val)\r\n\r\n            # try splitting the dataset\r\n            true_rows, false_rows = partition(rows, question)\r\n\r\n            # Skip this split if it doesn\'t divide the\r\n            # dataset.\r\n            if len(true_rows) == 0 or len(false_rows) == 0:\r\n                continue\r\n\r\n            # Calculate the information gain from this split\r\n            gain = info_gain(true_rows, false_rows, current_uncertainty)\r\n\r\n            # You actually can use \'>\' instead of \'>=\' here\r\n            # but I wanted the tree to look a certain way for our\r\n            # toy dataset.\r\n            if gain >= best_gain:\r\n                best_gain, best_question = gain, question\r\n\r\n    return best_gain, best_question\r\n\r\n#######\r\n# Demo:\r\n# Find the best question to ask first for our toy dataset.\r\n# best_gain, best_question = find_best_split(training_data)\r\n# FYI: is color == Red is just as good. See the note in the code above\r\n# where I used \'>=\'.\r\n#######\r\n\r\nclass Leaf:\r\n    \"\"\"A Leaf node classifies data.\r\n    This holds a dictionary of class (e.g., \"Apple\") -> number of times\r\n    it appears in the rows from the training data that reach this leaf.\r\n    \"\"\"\r\n\r\n    def __init__(self, rows):\r\n        self.predictions = class_counts(rows)\r\n\r\n\r\nclass Decision_Node:\r\n    \"\"\"A Decision Node asks a question.\r\n    This holds a reference to the question, and to the two child nodes.\r\n    \"\"\"\r\n\r\n    def __init__(self,\r\n                 question,\r\n                 true_branch,\r\n                 false_branch):\r\n        self.question = question\r\n        self.true_branch = true_branch\r\n        self.false_branch = false_branch\r\n\r\n\r\ndef build_tree(rows):\r\n    \"\"\"Builds the tree.\r\n    Rules of recursion: 1) Believe that it works. 2) Start by checking\r\n    for the base case (no further information gain). 3) Prepare for\r\n    giant stack traces.\r\n    \"\"\"\r\n\r\n    # Try partitioing the dataset on each of the unique attribute,\r\n    # calculate the information gain,\r\n    # and return the question that produces the highest gain.\r\n    gain, question = find_best_split(rows)\r\n\r\n    # Base case: no further info gain\r\n    # Since we can ask no further questions,\r\n    # we\'ll return a leaf.\r\n    if gain == 0:\r\n        return Leaf(rows)\r\n\r\n    # If we reach here, we have found a useful feature / value\r\n    # to partition on.\r\n    true_rows, false_rows = partition(rows, question)\r\n\r\n    # Recursively build the true branch.\r\n    true_branch = build_tree(true_rows)\r\n\r\n    # Recursively build the false branch.\r\n    false_branch = build_tree(false_rows)\r\n\r\n    # Return a Question node.\r\n    # This records the best feature / value to ask at this point,\r\n    # as well as the branches to follow\r\n    # dependingo on the answer.\r\n    return Decision_Node(question, true_branch, false_branch)\r\n\r\n\r\ndef print_tree(node, spacing=\"\"):\r\n    \"\"\"World\'s most elegant tree printing function.\"\"\"\r\n\r\n    # Base case: we\'ve reached a leaf\r\n    if isinstance(node, Leaf):\r\n        print (spacing + \"Predict\", node.predictions)\r\n        return\r\n\r\n    # Print the question at this node\r\n    print (spacing + str(node.question))\r\n\r\n    # Call this function recursively on the true branch\r\n    print (spacing + \'--> True:\')\r\n    print_tree(node.true_branch, spacing + \"  \")\r\n\r\n    # Call this function recursively on the false branch\r\n    print (spacing + \'--> False:\')\r\n    print_tree(node.false_branch, spacing + \"  \")\r\n\r\n\r\ndef classify(row, node):\r\n    \"\"\"See the \'rules of recursion\' above.\"\"\"\r\n\r\n    # Base case: we\'ve reached a leaf\r\n    if isinstance(node, Leaf):\r\n        return node.predictions\r\n\r\n    # Decide whether to follow the true-branch or the false-branch.\r\n    # Compare the feature / value stored in the node,\r\n    # to the example we\'re considering.\r\n    if node.question.match(row):\r\n        return classify(row, node.true_branch)\r\n    else:\r\n        return classify(row, node.false_branch)\r\n\r\n\r\n#######\r\n# Demo:\r\n# The tree predicts the 1st row of our\r\n# training data is an apple with confidence 1.\r\n# my_tree = build_tree(training_data)\r\n# classify(training_data[0], my_tree)\r\n#######\r\n\r\ndef print_leaf(counts):\r\n    \"\"\"A nicer way to print the predictions at a leaf.\"\"\"\r\n    total = sum(counts.values()) * 1.0\r\n    probs = {}\r\n    for lbl in counts.keys():\r\n        probs[lbl] = str(int(counts[lbl] / total * 100)) + \"%\"\r\n    return probs\r\n\r\n\r\n#######\r\n# Demo:\r\n# Printing that a bit nicer\r\n# print_leaf(classify(training_data[0], my_tree))\r\n#######\r\n\r\n#######\r\n# Demo:\r\n# On the second example, the confidence is lower\r\n# print_leaf(classify(training_data[1], my_tree))\r\n#######\r\n\r\nif __name__ == \'__main__\':\r\n    conn = sqlite3.connect(\'test.db\')\r\n    conn.execute(\'\'\'CREATE TABLE IF NOT EXISTS reccomendations\r\n         (ID INT NOT NULL,\r\n         SONGGROUP TEXT NOT NULL);\'\'\')\r\n    \r\n    #my_tree = build_tree(training_data)\r\n\r\n    #print_tree(my_tree)\r\n\r\n    # Evaluate\r\n    #testing_data = [\r\n    #   [\'clscl\',\'clscl\',\'rmntc\',\'wrkut\',\'clscl\',\'hindi-grp3\'],\r\n    #]\r\n\r\n    #testing_data = []\r\n    #cursor = conn.execute(\"SELECT * FROM users\")\r\n    #for row in cursor:\r\n        #testing_data.append(list(row))\r\n    #testing_data = [\r\n     #   [\'male\',20,\'north\',\'rmntc\',\'rmntc\',\'clscl\',\'rmntc\',\'wrkut\',\'hindi-grp2\'],\r\n    #]\r\n    #conn.execute(\"delete from reccomendations\")\r\n    #conn.commit()\r\n    \r\n    #for row in testing_data:\r\n      #  d = classify(row, my_tree)\r\n       # for i in d.keys():\r\n        #    query = \"INSERT INTO reccomendations(ID,SONGGROUP) VALUES(101,\'\"+i+\"\')\"\r\n         #   conn.execute(query)\r\n\r\n    conn.commit()\r\n   # cursor = conn.execute(\"SELECT * FROM reccomendations\")\r\n    #for row in cursor:\r\n     #  print(\"ID = \", row[0])\r\n      # print(\"RECCOMENDED SONG = \", row[1])\r\n    conn.close()\r\n    \r\n    \r\n# Next steps\r\n# - add support for missing (or unseen) attributes\r\n# - prune the tree to prevent overfitting\r\n# - add support for regression\r\n\"\"\"Code to accompany Machine Learning Recipes #8.\r\nWe\'ll write a Decision Tree Classifier, in pure Python.\r\n\"\"\"\r\n\r\n# For Python 2 / 3 compatability\r\nfrom __future__ import print_function\r\nfrom combs import generate_data_hindi\r\nfrom data_generator import generate_data\r\nimport sqlite3\r\n\r\n# Toy dataset.\r\n# Format: each row is an example.\r\n# The last column is the label.\r\n# The first two columns are features.\r\n# Feel free to play with it by adding more features & examples.\r\n# Interesting note: I\'ve written this so the 2nd and 5th examples\r\n# have the same features, but different labels - so we can see how the\r\n# tree handles this case.\r\n\r\n#training_data = generate_data_hindi()\r\n\r\ntraining_data = generate_data()\r\n\r\n# Column labels.\r\n# These are used only to print the tree.\r\n\r\n#header = [\"song1\",\"song2\",\"song3\",\"song4\",\"song5\", \"label\"]\r\n\r\nheader = [\"gender\",\"age\",\"region\", \"song1\", \"song2\", \"song3\", \"song4\", \"song5\", \"label\"]\r\n\r\n\r\ndef unique_vals(rows, col):\r\n    \"\"\"Find the unique values for a column in a dataset.\"\"\"\r\n    return set([row[col] for row in rows])\r\n\r\n#######\r\n# Demo:\r\n# unique_vals(training_data, 0)\r\n# unique_vals(training_data, 1)\r\n#######\r\n\r\n\r\ndef class_counts(rows):\r\n    \"\"\"Counts the number of each type of example in a dataset.\"\"\"\r\n    counts = {}  # a dictionary of label -> count.\r\n    for row in rows:\r\n        # in our dataset format, the label is always the last column\r\n        label = row[-1]\r\n        if label not in counts:\r\n            counts[label] = 0\r\n        counts[label] += 1\r\n    return counts\r\n\r\n#######\r\n# Demo:\r\n# class_counts(training_data)\r\n#######\r\n\r\n\r\ndef is_numeric(value):\r\n    \"\"\"Test if a value is numeric.\"\"\"\r\n    return isinstance(value, int) or isinstance(value, float)\r\n\r\n#######\r\n# Demo:\r\n# is_numeric(7)\r\n# is_numeric(\"Red\")\r\n#######\r\n\r\n\r\nclass Question:\r\n    \"\"\"A Question is used to partition a dataset.\r\n    This class just records a \'column number\' (e.g., 0 for Color) and a\r\n    \'column value\' (e.g., Green). The \'match\' method is used to compare\r\n    the feature value in an example to the feature value stored in the\r\n    question. See the demo below.\r\n    \"\"\"\r\n\r\n    def __init__(self, column, value):\r\n        self.column = column\r\n        self.value = value\r\n\r\n    def match(self, example):\r\n        # Compare the feature value in an example to the\r\n        # feature value in this question.\r\n        val = example[self.column]\r\n        if is_numeric(val):\r\n            return val >= self.value\r\n        else:\r\n            return val == self.value\r\n\r\n    def __repr__(self):\r\n        # This is just a helper method to print\r\n        # the question in a readable format.\r\n        condition = \"==\"\r\n        if is_numeric(self.value):\r\n            condition = \">=\"\r\n        return \"Is %s %s %s?\" % (\r\n            header[self.column], condition, str(self.value))\r\n\r\n#######\r\n# Demo:\r\n# Let\'s write a question for a numeric attribute\r\n# Question(1, 3)\r\n# How about one for a categorical attribute\r\n# q = Question(0, \'Green\')\r\n# Let\'s pick an example from the training set...\r\n# example = training_data[0]\r\n# ... and see if it matches the question\r\n# q.match(example)\r\n#######\r\n\r\n\r\ndef partition(rows, question):\r\n    \"\"\"Partitions a dataset.\r\n    For each row in the dataset, check if it matches the question. If\r\n    so, add it to \'true rows\', otherwise, add it to \'false rows\'.\r\n    \"\"\"\r\n    true_rows, false_rows = [], []\r\n    for row in rows:\r\n        if question.match(row):\r\n            true_rows.append(row)\r\n        else:\r\n            false_rows.append(row)\r\n    return true_rows, false_rows\r\n\r\n\r\n#######\r\n# Demo:\r\n# Let\'s partition the training data based on whether rows are Red.\r\n# true_rows, false_rows = partition(training_data, Question(0, \'Red\'))\r\n# This will contain all the \'Red\' rows.\r\n# true_rows\r\n# This will contain everything else.\r\n# false_rows\r\n#######\r\n\r\ndef gini(rows):\r\n    \"\"\"Calculate the Gini Impurity for a list of rows.\r\n    There are a few different ways to do this, I thought this one was\r\n    the most concise. See:\r\n    https://en.wikipedia.org/wiki/Decision_tree_learning#Gini_impurity\r\n    \"\"\"\r\n    counts = class_counts(rows)\r\n    impurity = 1\r\n    for lbl in counts:\r\n        prob_of_lbl = counts[lbl] / float(len(rows))\r\n        impurity -= prob_of_lbl**2\r\n    return impurity\r\n\r\n\r\n#######\r\n# Demo:\r\n# Let\'s look at some example to understand how Gini Impurity works.\r\n#\r\n# First, we\'ll look at a dataset with no mixing.\r\n# no_mixing = [[\'Apple\'],\r\n#              [\'Apple\']]\r\n# this will return 0\r\n# gini(no_mixing)\r\n#\r\n# Now, we\'ll look at dataset with a 50:50 apples:oranges ratio\r\n# some_mixing = [[\'Apple\'],\r\n#               [\'Orange\']]\r\n# this will return 0.5 - meaning, there\'s a 50% chance of misclassifying\r\n# a random example we draw from the dataset.\r\n# gini(some_mixing)\r\n#\r\n# Now, we\'ll look at a dataset with many different labels\r\n# lots_of_mixing = [[\'Apple\'],\r\n#                  [\'Orange\'],\r\n#                  [\'Grape\'],\r\n#                  [\'Grapefruit\'],\r\n#                  [\'Blueberry\']]\r\n# This will return 0.8\r\n# gini(lots_of_mixing)\r\n#######\r\n\r\ndef info_gain(left, right, current_uncertainty):\r\n    \"\"\"Information Gain.\r\n    The uncertainty of the starting node, minus the weighted impurity of\r\n    two child nodes.\r\n    \"\"\"\r\n    p = float(len(left)) / (len(left) + len(right))\r\n    return current_uncertainty - p * gini(left) - (1 - p) * gini(right)\r\n\r\n#######\r\n# Demo:\r\n# Calculate the uncertainy of our training data.\r\n# current_uncertainty = gini(training_data)\r\n#\r\n# How much information do we gain by partioning on \'Green\'?\r\n# true_rows, false_rows = partition(training_data, Question(0, \'Green\'))\r\n# info_gain(true_rows, false_rows, current_uncertainty)\r\n#\r\n# What about if we partioned on \'Red\' instead?\r\n# true_rows, false_rows = partition(training_data, Question(0,\'Red\'))\r\n# info_gain(true_rows, false_rows, current_uncertainty)\r\n#\r\n# It looks like we learned more using \'Red\' (0.37), than \'Green\' (0.14).\r\n# Why? Look at the different splits that result, and see which one\r\n# looks more \'unmixed\' to you.\r\n# true_rows, false_rows = partition(training_data, Question(0,\'Red\'))\r\n#\r\n# Here, the true_rows contain only \'Grapes\'.\r\n# true_rows\r\n#\r\n# And the false rows contain two types of fruit. Not too bad.\r\n# false_rows\r\n#\r\n# On the other hand, partitioning by Green doesn\'t help so much.\r\n# true_rows, false_rows = partition(training_data, Question(0,\'Green\'))\r\n#\r\n# We\'ve isolated one apple in the true rows.\r\n# true_rows\r\n#\r\n# But, the false-rows are badly mixed up.\r\n# false_rows\r\n#######\r\n\r\n\r\ndef find_best_split(rows):\r\n    \"\"\"Find the best question to ask by iterating over every feature / value\r\n    and calculating the information gain.\"\"\"\r\n    best_gain = 0  # keep track of the best information gain\r\n    best_question = None  # keep train of the feature / value that produced it\r\n    current_uncertainty = gini(rows)\r\n    n_features = len(rows[0]) - 1  # number of columns\r\n\r\n    for col in range(n_features):  # for each feature\r\n\r\n        values = set([row[col] for row in rows])  # unique values in the column\r\n\r\n        for val in values:  # for each value\r\n\r\n            question = Question(col, val)\r\n\r\n            # try splitting the dataset\r\n            true_rows, false_rows = partition(rows, question)\r\n\r\n            # Skip this split if it doesn\'t divide the\r\n            # dataset.\r\n            if len(true_rows) == 0 or len(false_rows) == 0:\r\n                continue\r\n\r\n            # Calculate the information gain from this split\r\n            gain = info_gain(true_rows, false_rows, current_uncertainty)\r\n\r\n            # You actually can use \'>\' instead of \'>=\' here\r\n            # but I wanted the tree to look a certain way for our\r\n            # toy dataset.\r\n            if gain >= best_gain:\r\n                best_gain, best_question = gain, question\r\n\r\n    return best_gain, best_question\r\n\r\n#######\r\n# Demo:\r\n# Find the best question to ask first for our toy dataset.\r\n# best_gain, best_question = find_best_split(training_data)\r\n# FYI: is color == Red is just as good. See the note in the code above\r\n# where I used \'>=\'.\r\n#######\r\n\r\nclass Leaf:\r\n    \"\"\"A Leaf node classifies data.\r\n    This holds a dictionary of class (e.g., \"Apple\") -> number of times\r\n    it appears in the rows from the training data that reach this leaf.\r\n    \"\"\"\r\n\r\n    def __init__(self, rows):\r\n        self.predictions = class_counts(rows)\r\n\r\n\r\nclass Decision_Node:\r\n    \"\"\"A Decision Node asks a question.\r\n    This holds a reference to the question, and to the two child nodes.\r\n    \"\"\"\r\n\r\n    def __init__(self,\r\n                 question,\r\n                 true_branch,\r\n                 false_branch):\r\n        self.question = question\r\n        self.true_branch = true_branch\r\n        self.false_branch = false_branch\r\n\r\n\r\ndef build_tree(rows):\r\n    \"\"\"Builds the tree.\r\n    Rules of recursion: 1) Believe that it works. 2) Start by checking\r\n    for the base case (no further information gain). 3) Prepare for\r\n    giant stack traces.\r\n    \"\"\"\r\n\r\n    # Try partitioing the dataset on each of the unique attribute,\r\n    # calculate the information gain,\r\n    # and return the question that produces the highest gain.\r\n    gain, question = find_best_split(rows)\r\n\r\n    # Base case: no further info gain\r\n    # Since we can ask no further questions,\r\n    # we\'ll return a leaf.\r\n    if gain == 0:\r\n        return Leaf(rows)\r\n\r\n    # If we reach here, we have found a useful feature / value\r\n    # to partition on.\r\n    true_rows, false_rows = partition(rows, question)\r\n\r\n    # Recursively build the true branch.\r\n    true_branch = build_tree(true_rows)\r\n\r\n    # Recursively build the false branch.\r\n    false_branch = build_tree(false_rows)\r\n\r\n    # Return a Question node.\r\n    # This records the best feature / value to ask at this point,\r\n    # as well as the branches to follow\r\n    # dependingo on the answer.\r\n    return Decision_Node(question, true_branch, false_branch)\r\n\r\n\r\ndef print_tree(node, spacing=\"\"):\r\n    \"\"\"World\'s most elegant tree printing function.\"\"\"\r\n\r\n    # Base case: we\'ve reached a leaf\r\n    if isinstance(node, Leaf):\r\n        print (spacing + \"Predict\", node.predictions)\r\n        return\r\n\r\n    # Print the question at this node\r\n    print (spacing + str(node.question))\r\n\r\n    # Call this function recursively on the true branch\r\n    print (spacing + \'--> True:\')\r\n    print_tree(node.true_branch, spacing + \"  \")\r\n\r\n    # Call this function recursively on the false branch\r\n    print (spacing + \'--> False:\')\r\n    print_tree(node.false_branch, spacing + \"  \")\r\n\r\n\r\ndef classify(row, node):\r\n    \"\"\"See the \'rules of recursion\' above.\"\"\"\r\n\r\n    # Base case: we\'ve reached a leaf\r\n    if isinstance(node, Leaf):\r\n        return node.predictions\r\n\r\n    # Decide whether to follow the true-branch or the false-branch.\r\n    # Compare the feature / value stored in the node,\r\n    # to the example we\'re considering.\r\n    if node.question.match(row):\r\n        return classify(row, node.true_branch)\r\n    else:\r\n        return classify(row, node.false_branch)\r\n\r\n\r\n#######\r\n# Demo:\r\n# The tree predicts the 1st row of our\r\n# training data is an apple with confidence 1.\r\n# my_tree = build_tree(training_data)\r\n# classify(training_data[0], my_tree)\r\n#######\r\n\r\ndef print_leaf(counts):\r\n    \"\"\"A nicer way to print the predictions at a leaf.\"\"\"\r\n    total = sum(counts.values()) * 1.0\r\n    probs = {}\r\n    for lbl in counts.keys():\r\n        probs[lbl] = str(int(counts[lbl] / total * 100)) + \"%\"\r\n    return probs\r\n\r\n\r\n#######\r\n# Demo:\r\n# Printing that a bit nicer\r\n# print_leaf(classify(training_data[0], my_tree))\r\n#######\r\n\r\n#######\r\n# Demo:\r\n# On the second example, the confidence is lower\r\n# print_leaf(classify(training_data[1], my_tree))\r\n#######\r\n\r\nif __name__ == \'__main__\':\r\n    conn = sqlite3.connect(\'test.db\')\r\n    conn.execute(\'\'\'CREATE TABLE IF NOT EXISTS reccomendations\r\n         (ID INT NOT NULL,\r\n         SONGGROUP TEXT NOT NULL);\'\'\')\r\n    \r\n    #my_tree = build_tree(training_data)\r\n\r\n    #print_tree(my_tree)\r\n\r\n    # Evaluate\r\n    #testing_data = [\r\n    #   [\'clscl\',\'clscl\',\'rmntc\',\'wrkut\',\'clscl\',\'hindi-grp3\'],\r\n    #]\r\n\r\n    #testing_data = []\r\n    #cursor = conn.execute(\"SELECT * FROM users\")\r\n    #for row in cursor:\r\n        #testing_data.append(list(row))\r\n    #testing_data = [\r\n     #   [\'male\',20,\'north\',\'rmntc\',\'rmntc\',\'clscl\',\'rmntc\',\'wrkut\',\'hindi-grp2\'],\r\n    #]\r\n    #conn.execute(\"delete from reccomendations\")\r\n    #conn.commit()\r\n    \r\n    #for row in testing_data:\r\n      #  d = classify(row, my_tree)\r\n       # for i in d.keys():\r\n        #    query = \"INSERT INTO reccomendations(ID,SONGGROUP) VALUES(101,\'\"+i+\"\')\"\r\n         #   conn.execute(query)\r\n\r\n    conn.commit()\r\n   # cursor = conn.execute(\"SELECT * FROM reccomendations\")\r\n    #for row in cursor:\r\n     #  print(\"ID = \", row[0])\r\n      # print(\"RECCOMENDED SONG = \", row[1])\r\n    conn.close()\r\n    \r\n    \r\n# Next steps\r\n# - add support for missing (or unseen) attributes\r\n# - prune the tree to prevent overfitting\r\n# - add support for regression\r\n','Hindi','male-adult-hindi-grp-9'),('References_link.txt','punnu','punnu lala','C:\\Users\\user\\eclipse-workspace\\SplittingCriteria\\WebContent\\Fileupload\\References_link.txt','text/plain',98,'Tomcat\r\n\r\nhttps://www.youtube.com/watch?v=_vqvvcsodSg\r\nhttps://www.youtube.com/watch?v=2kIiSeY71oQTomcat\r\n\r\nhttps://www.youtube.com/watch?v=_vqvvcsodSg\r\nhttps://www.youtube.com/watch?v=2kIiSeY71oQ','Hindi','female-minor-hindi-grp-13'),('something.txt','ad','adad','C:\\Users\\user\\eclipse-workspace\\SplittingCriteria\\WebContent\\Fileupload\\something.txt','text/plain',13,'hello workinghello working','Hindi','male-adult-hindi-grp-9');
/*!40000 ALTER TABLE `upload` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-04-21  9:26:23
